AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Translate Infrastructure - S3 Buckets, Lambda Function, and IAM Roles'

Parameters:
  ProjectName:
    Type: String
    Default: 'aws-translate-capstone'
    Description: 'Name prefix for all resources'
  
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: 'Lambda function timeout in seconds'
    MinValue: 30
    MaxValue: 900

Resources:
  # S3 Bucket for translation requests (input)
  RequestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-request-bucket-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket for translation responses (output)
  ResponseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-response-bucket-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub '${RequestBucket.Arn}/*' # Use RequestBucket.Arn here
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${ResponseBucket.Arn}/*' # Use ResponseBucket.Arn here
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !GetAtt RequestBucket.Arn
                  - !GetAtt ResponseBucket.Arn
        - PolicyName: TranslateAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - translate:TranslateText
                  - translate:DescribeTextTranslationJob
                  - translate:ListLanguages
                Resource: '*'

  # Lambda function for translation processing
  TranslateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-translate-function'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: 256
      Environment:
        Variables:
          REQUEST_BUCKET: !Ref RequestBucket
          RESPONSE_BUCKET: !Ref ResponseBucket
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from datetime import datetime
          from urllib.parse import unquote_plus
          import uuid

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(os.environ.get('LOG_LEVEL', 'INFO'))

          # Initialize AWS clients
          s3_client = boto3.client('s3')
          translate_client = boto3.client('translate')

          def lambda_handler(event, context):
              """
              Lambda handler for processing S3 translation requests
              """
              try:
                  # Process each record in the event
                  for record in event['Records']:
                      bucket_name = record['s3']['bucket']['name']
                      object_key = unquote_plus(record['s3']['object']['key'])
                      
                      logger.info(f"Processing file: {object_key} from bucket: {bucket_name}")
                      
                      # Process the translation request
                      process_translation_request(bucket_name, object_key)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Translation processing completed successfully')
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing translation request: {str(e)}")
                  raise e

          def process_translation_request(bucket_name, object_key):
              """
              Process a single translation request file
              """
              try:
                  # Read the input file from S3
                  response = s3_client.get_object(Bucket=bucket_name, Key=object_key)
                  input_data = json.loads(response['Body'].read().decode('utf-8'))
                  
                  # Validate input format
                  validate_input_format(input_data)
                  
                  # Perform translations
                  translations = []
                  total_characters = 0
                  start_time = datetime.now()
                  
                  for text_item in input_data.get('texts', []):
                      text_content = text_item.get('content', '')
                      if not text_content.strip():
                          continue
                          
                      # Translate the text
                      translated_text = translate_text(
                          text_content,
                          input_data['source_language'],
                          input_data['target_language']
                      )
                      
                      translations.append({
                          'id': text_item.get('id', str(uuid.uuid4())),
                          'original': text_content,
                          'translated': translated_text
                      })
                      
                      total_characters += len(text_content)
                  
                  # Calculate processing time
                  processing_time = (datetime.now() - start_time).total_seconds() * 1000
                  
                  # Create output data
                  output_data = {
                      'source_language': input_data['source_language'],
                      'target_language': input_data['target_language'],
                      'translations': translations,
                      'translation_metadata': {
                          'timestamp': datetime.now().isoformat() + 'Z',
                          'characters_translated': total_characters,
                          'processing_time_ms': int(processing_time),
                          'input_file': object_key
                      }
                  }
                  
                  # Save result to response bucket
                  output_key = generate_output_key(object_key, input_data)
                  save_translation_result(output_data, output_key)
                  
                  logger.info(f"Translation completed. Characters: {total_characters}, Time: {processing_time:.2f}ms")
                  
              except Exception as e:
                  logger.error(f"Error processing translation request: {str(e)}")
                  raise e

          def validate_input_format(input_data):
              """
              Validate the input JSON format
              """
              required_fields = ['source_language', 'target_language', 'texts']
              for field in required_fields:
                  if field not in input_data:
                      raise ValueError(f"Missing required field: {field}")
              
              if not isinstance(input_data['texts'], list):
                  raise ValueError("'texts' field must be a list")
              
              for i, text_item in enumerate(input_data['texts']):
                  if not isinstance(text_item, dict) or 'content' not in text_item:
                      raise ValueError(f"Invalid text item at index {i}: missing 'content' field")

          def translate_text(text, source_lang, target_lang):
              """
              Translate text using AWS Translate
              """
              try:
                  response = translate_client.translate_text(
                      Text=text,
                      SourceLanguageCode=source_lang,
                      TargetLanguageCode=target_lang
                  )
                  return response['TranslatedText']
              except Exception as e:
                  logger.error(f"Translation error: {str(e)}")
                  raise e

          def generate_output_key(input_key, input_data):
              """
              Generate output file key based on input file and languages
              """
              # Remove .json extension and add language info
              base_name = input_key.replace('.json', '')
              timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
              
              output_key = f"translated/{base_name}_{input_data['source_language']}_to_{input_data['target_language']}_{timestamp}.json"
              return output_key

          def save_translation_result(output_data, output_key):
              """
              Save translation result to S3 response bucket
              """
              try:
                  response_bucket = os.environ['RESPONSE_BUCKET']
                  s3_client.put_object(
                      Bucket=response_bucket,
                      Key=output_key,
                      Body=json.dumps(output_data, indent=2, ensure_ascii=False),
                      ContentType='application/json'
                  )
                  logger.info(f"Translation result saved to: {output_key}")
              except Exception as e:
                  logger.error(f"Error saving translation result: {str(e)}")
                  raise e

  # Lambda permission for S3 to invoke the function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TranslateLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RequestBucket.Arn # Use !GetAtt for the ARN
      # Explicitly declare dependency to ensure RequestBucket is created first
      DependsOn: RequestBucket

  # S3 Bucket Notification Configuration
  RequestBucketNotification:
    Type: AWS::S3::BucketNotification
    Properties:
      Bucket: !Ref RequestBucket # Reference the RequestBucket resource
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt TranslateLambdaFunction.Arn # Reference the Lambda function ARN
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
    # Explicitly declare dependencies to ensure RequestBucket, TranslateLambdaFunction,
    # and LambdaInvokePermission are created before configuring notifications.
    DependsOn:
      - RequestBucket
      - TranslateLambdaFunction
      - LambdaInvokePermission

  # CloudWatch Log Group for Lambda function
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-translate-function'
      RetentionInDays: 14

Outputs:
  RequestBucketName:
    Description: 'Name of the S3 bucket for translation requests'
    Value: !Ref RequestBucket
    Export:
      Name: !Sub '${AWS::StackName}-RequestBucket'

  ResponseBucketName:
    Description: 'Name of the S3 bucket for translation responses'
    Value: !Ref ResponseBucket
    Export:
      Name: !Sub '${AWS::StackName}-ResponseBucket'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt TranslateLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref TranslateLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaName'

  IAMRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleArn'